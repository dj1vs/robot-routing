
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOLONleftCOMMAleftANDORleftEQUALSNOT_EQUALGREATER_THANLESS_THANEQUAL_GREATER_THANEQUAL_LESS_THANleftASleftPLUSMINUSleftTIMESDIVIDEEXACTDIVMODleftEXPrightUMINUSNOTleftDOTAND AS CASE COLON COMMA CONTINUE DECIMAL DEFUN DIM DIVIDE DO DOT ELSE ELSEIF END EQUALS EQUAL_GREATER_THAN EQUAL_LESS_THAN EXACTDIV EXIT EXP FOR FUNCTION GREATER_THAN ID IF INTEGER LBRACE LESS_THAN LET LOOP LPAREN MINUS MOD NEXT NOT NOT_EQUAL OR PLUS RBRACE RETURN RPAREN SELECT STEP STRING SUB THEN TIMES TO UNTIL USE WEND WHILE\nstatement : statement COLON statement\n\nstatement : assignment\n          | declaration\n          | funcall\n          | control\n          | return\n          | prog_end\n          | defun_statement\n\nstatement : expression\n\nstatement : block_begin\n\nstatement : block_end\n\nstatement : if_block_begin\n          | elseif_block_begin\n          | else_statement\n          | case_begin\n          | case_else_begin\n\nargs_list : args_list COMMA expression\n          | expression\n\nparams_list : params_list COMMA ID\n            | ID\n\ndefun_statement : DEFUN ID LPAREN params_list RPAREN EQUALS expression\n\nfuncall : ID args_list\n\nassignment : ID EQUALS expression\n           | LET ID EQUALS expression\n           | ID LPAREN expression RPAREN EQUALS expression\n           | expression DOT ID EQUALS expression\n\ndeclaration : declare_array\n\ndeclare_array : DIM ID LPAREN expression RPAREN AS ID\n\nrel_expression : expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression EQUAL_GREATER_THAN expression\n               | expression EQUAL_LESS_THAN expression\n               | expression EQUALS expression\n               | expression NOT_EQUAL expression\n               | rel_expression AND rel_expression\n               | rel_expression OR rel_expression\n               | LPAREN rel_expression RPAREN\n               | NOT rel_expression\n\nexpression : expression PLUS expression\n           | expression MINUS expression\n           | expression TIMES expression\n           | expression DIVIDE expression\n           | expression EXACTDIV expression\n           | expression MOD expression\n           | expression AS expression\n           | expression EXP expression\n           | expression DOT ID\n           | MINUS expression %prec UMINUS\n           | LPAREN expression RPAREN\n\nexpression : ID LPAREN RPAREN\n           | ID LPAREN args_list RPAREN\n\nexpression : INTEGER\n           | DECIMAL\n\nexpression : STRING\n\nexpression : ID\n\nexpression : LBRACE args_list RBRACE\n\nblock_begin : while_block_begin\n            | for_block_begin\n            | do_block_begin\n            | function_block_begin\n\nif_block_begin : IF rel_expression THEN\n\nelse_statement : ELSE\n\nelseif_block_begin : ELSEIF rel_expression THEN\n\nstatement : SELECT CASE expression\n          | SELECT expression\n\ncase_begin : CASE expression\n\ncase_else_begin : CASE ELSE\n\nwhile_block_begin : WHILE rel_expression\n\ndo_block_begin : DO\n\nfor_block_begin : FOR ID EQUALS expression TO expression\n                | FOR ID EQUALS expression TO expression STEP expression\n\nfunction_block_begin : SUB ID LPAREN params_list RPAREN\n                     | FUNCTION ID LPAREN params_list RPAREN\n                     | SUB ID LPAREN RPAREN\n                     | FUNCTION ID LPAREN RPAREN\n\nblock_end : END IF\n\nblock_end : END SELECT\n\nblock_end : END WHILE\n          | WEND\n\nblock_end : END FOR\n          | NEXT ID\n\nblock_end : LOOP\n          | LOOP WHILE rel_expression\n          | LOOP UNTIL rel_expression\n\nblock_end : END SUB\n          | END FUNCTION\n\nreturn : RETURN\n       | RETURN expression\n\nprog_end : END\n\ncontrol : EXIT WHILE\n        | EXIT DO\n        | EXIT FOR\n\ncontrol : CONTINUE WHILE\n        | CONTINUE DO\n        | CONTINUE FOR\n\nstatement : USE ID\n'
    
_lr_action_items = {'SELECT':([0,30,50,],[17,85,17,]),'USE':([0,50,],[19,19,]),'ID':([0,17,18,19,20,21,22,25,27,29,31,32,36,41,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,66,68,77,78,95,96,112,113,118,119,121,122,123,124,125,126,127,128,132,133,138,139,141,142,166,167,169,175,177,178,],[20,62,62,65,62,70,62,62,79,62,90,62,62,62,94,97,98,62,100,20,102,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,143,62,62,62,62,62,62,62,62,62,62,62,62,158,158,158,62,62,62,62,176,62,180,62,]),'LET':([0,50,],[21,21,]),'EXIT':([0,50,],[24,24,]),'CONTINUE':([0,50,],[28,28,]),'RETURN':([0,50,],[29,29,]),'END':([0,50,],[30,30,]),'DEFUN':([0,50,],[31,31,]),'MINUS':([0,9,17,18,20,22,25,29,32,33,34,35,36,41,47,50,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,71,76,77,78,83,91,95,96,102,103,104,105,106,107,108,109,110,111,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,130,132,134,141,142,143,144,145,146,147,150,151,152,153,154,155,157,164,165,166,167,173,174,175,178,179,181,],[32,53,32,32,32,32,32,32,32,-52,-53,-54,32,32,32,32,32,32,32,32,32,32,32,32,32,53,-55,53,32,53,32,53,53,32,32,53,-48,32,32,-47,-39,-40,-41,-42,-43,-44,53,-46,53,32,53,53,-50,32,32,-49,32,32,32,32,32,32,32,32,53,32,-56,32,32,-47,-49,-51,53,53,53,53,53,53,53,53,53,53,53,32,32,53,53,32,32,53,53,]),'LPAREN':([0,17,18,20,22,25,29,32,36,41,47,50,52,53,54,55,56,57,58,59,60,62,66,68,77,78,90,95,96,97,98,100,113,118,119,121,122,123,124,125,126,127,128,132,141,142,166,167,175,178,],[22,22,22,68,22,77,22,22,22,77,77,22,22,22,22,22,22,22,22,22,22,113,22,22,77,77,133,77,77,138,139,141,22,22,22,77,77,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'INTEGER':([0,17,18,20,22,25,29,32,36,41,47,50,52,53,54,55,56,57,58,59,60,66,68,77,78,95,96,113,118,119,121,122,123,124,125,126,127,128,132,141,142,166,167,175,178,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'DECIMAL':([0,17,18,20,22,25,29,32,36,41,47,50,52,53,54,55,56,57,58,59,60,66,68,77,78,95,96,113,118,119,121,122,123,124,125,126,127,128,132,141,142,166,167,175,178,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING':([0,17,18,20,22,25,29,32,36,41,47,50,52,53,54,55,56,57,58,59,60,66,68,77,78,95,96,113,118,119,121,122,123,124,125,126,127,128,132,141,142,166,167,175,178,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'LBRACE':([0,17,18,20,22,25,29,32,36,41,47,50,52,53,54,55,56,57,58,59,60,66,68,77,78,95,96,113,118,119,121,122,123,124,125,126,127,128,132,141,142,166,167,175,178,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'WEND':([0,50,],[42,42,]),'NEXT':([0,50,],[43,43,]),'LOOP':([0,50,],[44,44,]),'IF':([0,30,50,],[41,84,41,]),'ELSEIF':([0,50,],[47,47,]),'ELSE':([0,18,50,],[48,64,48,]),'CASE':([0,17,50,],[18,60,18,]),'DIM':([0,50,],[49,49,]),'WHILE':([0,24,28,30,44,50,],[25,72,80,86,95,25,]),'FOR':([0,24,28,30,50,],[27,74,82,87,27,]),'DO':([0,24,28,50,],[26,73,81,26,]),'SUB':([0,30,50,],[45,88,45,]),'FUNCTION':([0,30,50,],[46,89,46,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,20,23,26,29,30,33,34,35,37,38,39,40,42,44,48,61,62,63,64,65,67,69,72,73,74,75,80,81,82,83,84,85,86,87,88,89,91,94,101,102,103,104,105,106,107,108,109,110,111,114,116,120,131,134,135,136,137,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,163,165,170,171,173,174,179,180,181,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-55,-27,-69,-87,-89,-52,-53,-54,-57,-58,-59,-60,-79,-82,-62,-65,-55,-66,-67,-96,-18,-22,-90,-91,-92,-68,-93,-94,-95,-88,-76,-77,-78,-80,-85,-86,-48,-81,-1,-47,-39,-40,-41,-42,-43,-44,-45,-46,-64,-23,-50,-49,-38,-56,-61,-83,-84,-63,-47,-49,-51,-17,-24,-35,-36,-29,-30,-31,-32,-33,-34,-37,-74,-75,-26,-72,-73,-25,-70,-21,-28,-71,]),'COLON':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,20,23,26,29,30,33,34,35,37,38,39,40,42,44,48,61,62,63,64,65,67,69,72,73,74,75,80,81,82,83,84,85,86,87,88,89,91,94,101,102,103,104,105,106,107,108,109,110,111,114,116,120,131,134,135,136,137,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,163,165,170,171,173,174,179,180,181,],[50,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-55,-27,-69,-87,-89,-52,-53,-54,-57,-58,-59,-60,-79,-82,-62,-65,-55,-66,-67,-96,-18,-22,-90,-91,-92,-68,-93,-94,-95,-88,-76,-77,-78,-80,-85,-86,-48,-81,-1,-47,-39,-40,-41,-42,-43,-44,-45,-46,-64,-23,-50,-49,-38,-56,-61,-83,-84,-63,-47,-49,-51,-17,-24,-35,-36,-29,-30,-31,-32,-33,-34,-37,-74,-75,-26,-72,-73,-25,-70,-21,-28,-71,]),'DOT':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[51,-55,-52,-53,-54,112,-55,112,112,112,112,112,112,-47,112,112,112,112,112,112,112,112,112,112,112,-50,-49,112,-56,-47,-49,-51,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'PLUS':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[52,-55,-52,-53,-54,52,-55,52,52,52,52,52,-48,-47,-39,-40,-41,-42,-43,-44,52,-46,52,52,52,-50,-49,52,-56,-47,-49,-51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'TIMES':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[54,-55,-52,-53,-54,54,-55,54,54,54,54,54,-48,-47,54,54,-41,-42,-43,-44,54,-46,54,54,54,-50,-49,54,-56,-47,-49,-51,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'DIVIDE':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[55,-55,-52,-53,-54,55,-55,55,55,55,55,55,-48,-47,55,55,-41,-42,-43,-44,55,-46,55,55,55,-50,-49,55,-56,-47,-49,-51,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'EXACTDIV':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[56,-55,-52,-53,-54,56,-55,56,56,56,56,56,-48,-47,56,56,-41,-42,-43,-44,56,-46,56,56,56,-50,-49,56,-56,-47,-49,-51,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'MOD':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[57,-55,-52,-53,-54,57,-55,57,57,57,57,57,-48,-47,57,57,-41,-42,-43,-44,57,-46,57,57,57,-50,-49,57,-56,-47,-49,-51,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AS':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,172,173,174,179,181,],[58,-55,-52,-53,-54,58,-55,58,58,58,58,58,-48,-47,-39,-40,-41,-42,-43,-44,-45,-46,58,58,58,-50,-49,58,-56,-47,-49,-51,58,58,58,58,58,58,58,58,58,58,58,177,58,58,58,58,]),'EXP':([9,20,33,34,35,61,62,63,67,71,76,83,91,102,103,104,105,106,107,108,109,110,111,114,115,116,120,130,134,143,144,145,146,147,150,151,152,153,154,155,157,164,165,173,174,179,181,],[59,-55,-52,-53,-54,59,-55,59,59,59,59,59,-48,-47,59,59,59,59,59,59,59,-46,59,59,59,-50,-49,59,-56,-47,-49,-51,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'EQUALS':([20,33,34,35,62,70,76,79,91,102,103,104,105,106,107,108,109,110,116,120,130,134,143,144,145,168,],[66,-52,-53,-54,-55,119,127,132,-48,142,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,127,-56,-47,166,-51,175,]),'NOT':([25,41,47,77,78,95,96,121,122,],[78,78,78,78,78,78,78,78,78,]),'COMMA':([33,34,35,62,67,69,91,92,103,104,105,106,107,108,109,110,115,116,117,120,134,143,144,145,146,158,159,160,162,176,],[-52,-53,-54,-55,-18,118,-48,118,-39,-40,-41,-42,-43,-44,-45,-46,-18,-50,118,-49,-56,-47,-49,-51,-17,-20,169,169,169,-19,]),'RPAREN':([33,34,35,62,67,68,71,91,103,104,105,106,107,108,109,110,113,115,116,117,120,129,130,131,134,138,139,143,145,146,148,149,150,151,152,153,154,155,156,158,159,160,162,164,176,],[-52,-53,-54,-55,-18,116,120,-48,-39,-40,-41,-42,-43,-44,-45,-46,116,144,-50,145,-49,156,120,-38,-56,161,163,-47,-51,-17,-35,-36,-29,-30,-31,-32,-33,-34,-37,-20,168,170,171,172,-19,]),'GREATER_THAN':([33,34,35,62,76,91,103,104,105,106,107,108,109,110,116,120,130,134,143,145,],[-52,-53,-54,-55,123,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,123,-56,-47,-51,]),'LESS_THAN':([33,34,35,62,76,91,103,104,105,106,107,108,109,110,116,120,130,134,143,145,],[-52,-53,-54,-55,124,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,124,-56,-47,-51,]),'EQUAL_GREATER_THAN':([33,34,35,62,76,91,103,104,105,106,107,108,109,110,116,120,130,134,143,145,],[-52,-53,-54,-55,125,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,125,-56,-47,-51,]),'EQUAL_LESS_THAN':([33,34,35,62,76,91,103,104,105,106,107,108,109,110,116,120,130,134,143,145,],[-52,-53,-54,-55,126,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,126,-56,-47,-51,]),'NOT_EQUAL':([33,34,35,62,76,91,103,104,105,106,107,108,109,110,116,120,130,134,143,145,],[-52,-53,-54,-55,128,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,128,-56,-47,-51,]),'RBRACE':([33,34,35,62,67,91,92,103,104,105,106,107,108,109,110,116,120,134,143,145,146,],[-52,-53,-54,-55,-18,-48,134,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,-56,-47,-51,-17,]),'AND':([33,34,35,62,75,91,93,99,103,104,105,106,107,108,109,110,116,120,129,131,134,136,137,143,145,148,149,150,151,152,153,154,155,156,],[-52,-53,-54,-55,121,-48,121,121,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,121,-38,-56,121,121,-47,-51,-35,-36,-29,-30,-31,-32,-33,-34,-37,]),'OR':([33,34,35,62,75,91,93,99,103,104,105,106,107,108,109,110,116,120,129,131,134,136,137,143,145,148,149,150,151,152,153,154,155,156,],[-52,-53,-54,-55,122,-48,122,122,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,122,-38,-56,122,122,-47,-51,-35,-36,-29,-30,-31,-32,-33,-34,-37,]),'THEN':([33,34,35,62,91,93,99,103,104,105,106,107,108,109,110,116,120,131,134,143,145,148,149,150,151,152,153,154,155,156,],[-52,-53,-54,-55,-48,135,140,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,-38,-56,-47,-51,-35,-36,-29,-30,-31,-32,-33,-34,-37,]),'TO':([33,34,35,62,91,103,104,105,106,107,108,109,110,116,120,134,143,145,157,],[-52,-53,-54,-55,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,-56,-47,-51,167,]),'STEP':([33,34,35,62,91,103,104,105,106,107,108,109,110,116,120,134,143,145,174,],[-52,-53,-54,-55,-48,-39,-40,-41,-42,-43,-44,-45,-46,-50,-49,-56,-47,-51,178,]),'UNTIL':([44,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,50,],[1,101,]),'assignment':([0,50,],[2,2,]),'declaration':([0,50,],[3,3,]),'funcall':([0,50,],[4,4,]),'control':([0,50,],[5,5,]),'return':([0,50,],[6,6,]),'prog_end':([0,50,],[7,7,]),'defun_statement':([0,50,],[8,8,]),'expression':([0,17,18,20,22,25,29,32,36,41,47,50,52,53,54,55,56,57,58,59,60,66,68,77,78,95,96,113,118,119,121,122,123,124,125,126,127,128,132,141,142,166,167,175,178,],[9,61,63,67,71,76,83,91,67,76,76,9,103,104,105,106,107,108,109,110,111,114,115,130,76,76,76,67,146,147,76,76,150,151,152,153,154,155,157,164,165,173,174,179,181,]),'block_begin':([0,50,],[10,10,]),'block_end':([0,50,],[11,11,]),'if_block_begin':([0,50,],[12,12,]),'elseif_block_begin':([0,50,],[13,13,]),'else_statement':([0,50,],[14,14,]),'case_begin':([0,50,],[15,15,]),'case_else_begin':([0,50,],[16,16,]),'declare_array':([0,50,],[23,23,]),'while_block_begin':([0,50,],[37,37,]),'for_block_begin':([0,50,],[38,38,]),'do_block_begin':([0,50,],[39,39,]),'function_block_begin':([0,50,],[40,40,]),'args_list':([20,36,68,113,],[69,92,117,117,]),'rel_expression':([25,41,47,77,78,95,96,121,122,],[75,93,99,129,131,136,137,148,149,]),'params_list':([133,138,139,],[159,160,162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement COLON statement','statement',3,'p_multi_statement','basic_yacc.py',34),
  ('statement -> assignment','statement',1,'p_singleline_statement','basic_yacc.py',45),
  ('statement -> declaration','statement',1,'p_singleline_statement','basic_yacc.py',46),
  ('statement -> funcall','statement',1,'p_singleline_statement','basic_yacc.py',47),
  ('statement -> control','statement',1,'p_singleline_statement','basic_yacc.py',48),
  ('statement -> return','statement',1,'p_singleline_statement','basic_yacc.py',49),
  ('statement -> prog_end','statement',1,'p_singleline_statement','basic_yacc.py',50),
  ('statement -> defun_statement','statement',1,'p_singleline_statement','basic_yacc.py',51),
  ('statement -> expression','statement',1,'p_expression','basic_yacc.py',59),
  ('statement -> block_begin','statement',1,'p_multiline_begin_statement','basic_yacc.py',67),
  ('statement -> block_end','statement',1,'p_multiline_end_statement','basic_yacc.py',76),
  ('statement -> if_block_begin','statement',1,'p_logic_control','basic_yacc.py',83),
  ('statement -> elseif_block_begin','statement',1,'p_logic_control','basic_yacc.py',84),
  ('statement -> else_statement','statement',1,'p_logic_control','basic_yacc.py',85),
  ('statement -> case_begin','statement',1,'p_logic_control','basic_yacc.py',86),
  ('statement -> case_else_begin','statement',1,'p_logic_control','basic_yacc.py',87),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','basic_yacc.py',93),
  ('args_list -> expression','args_list',1,'p_args_list','basic_yacc.py',94),
  ('params_list -> params_list COMMA ID','params_list',3,'p_param_list','basic_yacc.py',104),
  ('params_list -> ID','params_list',1,'p_param_list','basic_yacc.py',105),
  ('defun_statement -> DEFUN ID LPAREN params_list RPAREN EQUALS expression','defun_statement',7,'p_defun','basic_yacc.py',115),
  ('funcall -> ID args_list','funcall',2,'p_funcall','basic_yacc.py',130),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','basic_yacc.py',137),
  ('assignment -> LET ID EQUALS expression','assignment',4,'p_assignment','basic_yacc.py',138),
  ('assignment -> ID LPAREN expression RPAREN EQUALS expression','assignment',6,'p_assignment','basic_yacc.py',139),
  ('assignment -> expression DOT ID EQUALS expression','assignment',5,'p_assignment','basic_yacc.py',140),
  ('declaration -> declare_array','declaration',1,'p_declare','basic_yacc.py',153),
  ('declare_array -> DIM ID LPAREN expression RPAREN AS ID','declare_array',7,'p_declare_array','basic_yacc.py',159),
  ('rel_expression -> expression GREATER_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',165),
  ('rel_expression -> expression LESS_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',166),
  ('rel_expression -> expression EQUAL_GREATER_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',167),
  ('rel_expression -> expression EQUAL_LESS_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',168),
  ('rel_expression -> expression EQUALS expression','rel_expression',3,'p_rel_expression','basic_yacc.py',169),
  ('rel_expression -> expression NOT_EQUAL expression','rel_expression',3,'p_rel_expression','basic_yacc.py',170),
  ('rel_expression -> rel_expression AND rel_expression','rel_expression',3,'p_rel_expression','basic_yacc.py',171),
  ('rel_expression -> rel_expression OR rel_expression','rel_expression',3,'p_rel_expression','basic_yacc.py',172),
  ('rel_expression -> LPAREN rel_expression RPAREN','rel_expression',3,'p_rel_expression','basic_yacc.py',173),
  ('rel_expression -> NOT rel_expression','rel_expression',2,'p_rel_expression','basic_yacc.py',174),
  ('expression -> expression PLUS expression','expression',3,'p_expression_calc','basic_yacc.py',199),
  ('expression -> expression MINUS expression','expression',3,'p_expression_calc','basic_yacc.py',200),
  ('expression -> expression TIMES expression','expression',3,'p_expression_calc','basic_yacc.py',201),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_calc','basic_yacc.py',202),
  ('expression -> expression EXACTDIV expression','expression',3,'p_expression_calc','basic_yacc.py',203),
  ('expression -> expression MOD expression','expression',3,'p_expression_calc','basic_yacc.py',204),
  ('expression -> expression AS expression','expression',3,'p_expression_calc','basic_yacc.py',205),
  ('expression -> expression EXP expression','expression',3,'p_expression_calc','basic_yacc.py',206),
  ('expression -> expression DOT ID','expression',3,'p_expression_calc','basic_yacc.py',207),
  ('expression -> MINUS expression','expression',2,'p_expression_calc','basic_yacc.py',208),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_calc','basic_yacc.py',209),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_inline_funcall','basic_yacc.py',238),
  ('expression -> ID LPAREN args_list RPAREN','expression',4,'p_inline_funcall','basic_yacc.py',239),
  ('expression -> INTEGER','expression',1,'p_expression_number','basic_yacc.py',249),
  ('expression -> DECIMAL','expression',1,'p_expression_number','basic_yacc.py',250),
  ('expression -> STRING','expression',1,'p_expression_string','basic_yacc.py',256),
  ('expression -> ID','expression',1,'p_expression_id','basic_yacc.py',262),
  ('expression -> LBRACE args_list RBRACE','expression',3,'p_expression_array','basic_yacc.py',268),
  ('block_begin -> while_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',275),
  ('block_begin -> for_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',276),
  ('block_begin -> do_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',277),
  ('block_begin -> function_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',278),
  ('if_block_begin -> IF rel_expression THEN','if_block_begin',3,'p_if_block_begin','basic_yacc.py',284),
  ('else_statement -> ELSE','else_statement',1,'p_else','basic_yacc.py',300),
  ('elseif_block_begin -> ELSEIF rel_expression THEN','elseif_block_begin',3,'p_elseif','basic_yacc.py',319),
  ('statement -> SELECT CASE expression','statement',3,'p_select_case_begin','basic_yacc.py',338),
  ('statement -> SELECT expression','statement',2,'p_select_case_begin','basic_yacc.py',339),
  ('case_begin -> CASE expression','case_begin',2,'p_case','basic_yacc.py',354),
  ('case_else_begin -> CASE ELSE','case_else_begin',2,'p_case_else','basic_yacc.py',384),
  ('while_block_begin -> WHILE rel_expression','while_block_begin',2,'p_while_block_begin','basic_yacc.py',408),
  ('do_block_begin -> DO','do_block_begin',1,'p_do_block_begin','basic_yacc.py',419),
  ('for_block_begin -> FOR ID EQUALS expression TO expression','for_block_begin',6,'p_for_block_begin','basic_yacc.py',430),
  ('for_block_begin -> FOR ID EQUALS expression TO expression STEP expression','for_block_begin',8,'p_for_block_begin','basic_yacc.py',431),
  ('function_block_begin -> SUB ID LPAREN params_list RPAREN','function_block_begin',5,'p_function_block_begin','basic_yacc.py',445),
  ('function_block_begin -> FUNCTION ID LPAREN params_list RPAREN','function_block_begin',5,'p_function_block_begin','basic_yacc.py',446),
  ('function_block_begin -> SUB ID LPAREN RPAREN','function_block_begin',4,'p_function_block_begin','basic_yacc.py',447),
  ('function_block_begin -> FUNCTION ID LPAREN RPAREN','function_block_begin',4,'p_function_block_begin','basic_yacc.py',448),
  ('block_end -> END IF','block_end',2,'p_if_block_end','basic_yacc.py',458),
  ('block_end -> END SELECT','block_end',2,'p_select_block_end','basic_yacc.py',466),
  ('block_end -> END WHILE','block_end',2,'p_while_block_end','basic_yacc.py',476),
  ('block_end -> WEND','block_end',1,'p_while_block_end','basic_yacc.py',477),
  ('block_end -> END FOR','block_end',2,'p_for_block_end','basic_yacc.py',485),
  ('block_end -> NEXT ID','block_end',2,'p_for_block_end','basic_yacc.py',486),
  ('block_end -> LOOP','block_end',1,'p_do_block_end','basic_yacc.py',497),
  ('block_end -> LOOP WHILE rel_expression','block_end',3,'p_do_block_end','basic_yacc.py',498),
  ('block_end -> LOOP UNTIL rel_expression','block_end',3,'p_do_block_end','basic_yacc.py',499),
  ('block_end -> END SUB','block_end',2,'p_function_block_end','basic_yacc.py',514),
  ('block_end -> END FUNCTION','block_end',2,'p_function_block_end','basic_yacc.py',515),
  ('return -> RETURN','return',1,'p_return','basic_yacc.py',524),
  ('return -> RETURN expression','return',2,'p_return','basic_yacc.py',525),
  ('prog_end -> END','prog_end',1,'p_prog_end','basic_yacc.py',541),
  ('control -> EXIT WHILE','control',2,'p_control_exit','basic_yacc.py',547),
  ('control -> EXIT DO','control',2,'p_control_exit','basic_yacc.py',548),
  ('control -> EXIT FOR','control',2,'p_control_exit','basic_yacc.py',549),
  ('control -> CONTINUE WHILE','control',2,'p_control_continue','basic_yacc.py',559),
  ('control -> CONTINUE DO','control',2,'p_control_continue','basic_yacc.py',560),
  ('control -> CONTINUE FOR','control',2,'p_control_continue','basic_yacc.py',561),
  ('statement -> USE ID','statement',2,'p_use_statement','basic_yacc.py',571),
]
